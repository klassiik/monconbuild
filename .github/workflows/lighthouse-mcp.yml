name: 'Lighthouse MCP Performance Audit'

on:
  push:
    branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      target_urls:
        description: 'Comma-separated URLs to audit'
        required: false
        default: ''

jobs:
  lighthouse-mcp-audit:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Install dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile

    - name: Prepare tools
      run: |
        # Use npx to fetch latest stable CLIs without adding to repo
        node -v
        npm -v
        yarn -v

    - name: Build application
      working-directory: ./frontend
      run: yarn build

    - name: Start application server
      working-directory: ./frontend
      run: |
        npx --yes serve@14 -s build -l 3000 &
        sleep 10
        curl -f http://localhost:3000 || exit 1

    - name: Run Lighthouse Audit (Mobile)
      run: |
        set -e
        # Determine URLs to audit
        if [ -n "${{ github.event.inputs.target_urls }}" ]; then
          URLS="${{ github.event.inputs.target_urls }}"
        else
          URLS="http://localhost:3000,http://localhost:3000/services,http://localhost:3000/about,http://localhost:3000/portfolio,http://localhost:3000/contact"
        fi
        echo "üîç Running Mobile Performance Audit..."
        mkdir -p ./lighthouse-reports/mobile
        IFS=',' read -ra PAGES <<< "$URLS"
        for u in "${PAGES[@]}"; do
          slug=$(echo "$u" | sed 's|https\?://||; s|/|_|g; s|[^A-Za-z0-9_.-]|-|g')
          echo "Running Lighthouse (mobile) for $u"
          npx --yes lighthouse@12 "$u" \
            --output=json \
            --output-path="./lighthouse-reports/mobile/${slug}.json" \
            --only-categories=performance,accessibility,seo,best-practices \
            --form-factor=mobile \
            --throttling-method=simulate \
            --quiet \
            --chrome-flags="--headless=new --no-sandbox --disable-gpu" || echo "Lighthouse mobile failed for $u"
        done
        
    - name: Run Lighthouse Audit (Desktop)
      run: |
        set -e
        # Determine URLs to audit
        if [ -n "${{ github.event.inputs.target_urls }}" ]; then
          URLS="${{ github.event.inputs.target_urls }}"
        else
          URLS="http://localhost:3000,http://localhost:3000/services,http://localhost:3000/about,http://localhost:3000/portfolio,http://localhost:3000/contact"
        fi
        echo "üñ•Ô∏è Running Desktop Performance Audit..."
        mkdir -p ./lighthouse-reports/desktop
        IFS=',' read -ra PAGES <<< "$URLS"
        for u in "${PAGES[@]}"; do
          slug=$(echo "$u" | sed 's|https\?://||; s|/|_|g; s|[^A-Za-z0-9_.-]|-|g')
          echo "Running Lighthouse (desktop) for $u"
          npx --yes lighthouse@12 "$u" \
            --output=json \
            --output-path="./lighthouse-reports/desktop/${slug}.json" \
            --only-categories=performance,accessibility,seo,best-practices \
            --preset=desktop \
            --quiet \
            --chrome-flags="--headless=new --no-sandbox --disable-gpu" || echo "Lighthouse desktop failed for $u"
        done

    - name: Generate Performance Report
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        // Read all Lighthouse reports
        const base = './lighthouse-reports';
        const files = [];
        function walk(dir) {
          for (const f of fs.readdirSync(dir)) {
            const p = path.join(dir, f);
            const s = fs.statSync(p);
            if (s.isDirectory()) walk(p); else if (f.endsWith('.json')) files.push(p);
          }
        }
        walk(base);
        const reports = files.map(f => JSON.parse(fs.readFileSync(f, 'utf8')));
        
        // Generate summary
        const summary = {
          timestamp: new Date().toISOString(),
          totalPages: reports.length,
          averageScores: {
            performance: 0,
            accessibility: 0,
            bestPractices: 0,
            seo: 0
          },
          criticalIssues: [],
          recommendations: []
        };
        
        reports.forEach(report => {
          if (report.categories) {
            summary.averageScores.performance += report.categories.performance?.score || 0;
            summary.averageScores.accessibility += report.categories.accessibility?.score || 0;
            summary.averageScores.bestPractices += report.categories['best-practices']?.score || 0;
            summary.averageScores.seo += report.categories.seo?.score || 0;
          }
        });
        
        // Calculate averages
        Object.keys(summary.averageScores).forEach(key => {
          summary.averageScores[key] = reports.length ? Math.round((summary.averageScores[key] / reports.length) * 100) : 0;
        });
        
        fs.writeFileSync('./performance-summary.json', JSON.stringify(summary, null, 2));
        
        console.log('Performance Summary Generated:');
        console.log('Average Performance Score:', summary.averageScores.performance);
        console.log('Average Accessibility Score:', summary.averageScores.accessibility);
        console.log('Average Best Practices Score:', summary.averageScores.bestPractices);
        console.log('Average SEO Score:', summary.averageScores.seo);
        "

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = JSON.parse(fs.readFileSync('./performance-summary.json', 'utf8'));
            
            const comment = `
            ## üöÄ Lighthouse MCP Performance Report
            
            **Performance Scores:**
            - Performance: ${summary.averageScores.performance}/100 ${summary.averageScores.performance >= 90 ? 'üü¢' : summary.averageScores.performance >= 70 ? 'üü°' : 'üî¥'}
            - Accessibility: ${summary.averageScores.accessibility}/100 ${summary.averageScores.accessibility >= 90 ? 'üü¢' : summary.averageScores.accessibility >= 70 ? 'üü°' : 'üî¥'}
            - Best Practices: ${summary.averageScores.bestPractices}/100 ${summary.averageScores.bestPractices >= 90 ? 'üü¢' : summary.averageScores.bestPractices >= 70 ? 'üü°' : 'üî¥'}
            - SEO: ${summary.averageScores.seo}/100 ${summary.averageScores.seo >= 90 ? 'üü¢' : summary.averageScores.seo >= 70 ? 'üü°' : 'üî¥'}
            
            **Pages Audited:** ${summary.totalPages}
            **Audit Time:** ${summary.timestamp}
            
            ${summary.averageScores.performance < 70 ? '‚ö†Ô∏è **Performance issues detected!** Consider reviewing the detailed reports.' : '‚úÖ **Performance looks good!**'}
            
            *Powered by Lighthouse MCP with AI-assisted analysis*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create performance comment:', error);
          }

    - name: Upload Lighthouse Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: |
          lighthouse-reports/**/*
          performance-summary.json
        retention-days: 30

    - name: Update Performance Badge
      if: github.ref == 'refs/heads/main'
      run: |
        # Generate performance badge
        SCORE=$(node -e "
        const fs = require('fs');
        const summary = JSON.parse(fs.readFileSync('./performance-summary.json', 'utf8'));
        console.log(summary.averageScores.performance);
        ")
        
        COLOR="red"
        if [ "$SCORE" -ge 90 ]; then
          COLOR="brightgreen"
        elif [ "$SCORE" -ge 70 ]; then
          COLOR="yellow"
        fi
        
        curl -o lighthouse-badge.svg "https://img.shields.io/badge/Lighthouse-${SCORE}%25-${COLOR}"
        
        # You can commit this badge or upload to a service
        echo "Performance badge generated: $SCORE%"
